//
//  TitleViewController.swift
//  Palett
//
//  Created by Vala Kohnechi on 9/8/15.
//  Copyright (c) 2015 Vala Kohnechi. All rights reserved.
//

import UIKit
import Foundation

protocol TitleViewControllerDelegate {
    func sendColorsToDisplayColorsViewController(brightColors:[UIColor], darkColors: [UIColor])
}

class TitleViewController: UIViewController, UIActionSheetDelegate, UINavigationControllerDelegate, UIPopoverControllerDelegate, UIImagePickerControllerDelegate {

    ///////////////////////////////////////////////////////////
    // MARK: Properties
    
    // Gradient Layer placed over view
    let gradient = CAGradientLayer()
    
    // Action sheet for photo
    let actionSheet = UIActionSheet()
    
    // Image picker
    let imagePicker = UIImagePickerController()
    
    // Colors Delegate
    let delegate: TitleViewControllerDelegate? = nil
    
    ///////////////////////////////////////////////////////////
    // MARK: ViewController LifeCycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Add initial Gradient
        addGradient()
        
        // Set delegates    
        imagePicker.delegate = self
        actionSheet.delegate = self
    }
    
    
    // Adding a gradient layer to UIView
    func addGradient() {
        
        // Random Dark Color Generated by Chameleon Framework
        let color = UIColor(randomFlatColorOfShadeStyle: UIShadeStyle.Dark)
        let darkColor = UIColor(complementaryFlatColorOf: color)
        
        // Set the gradient layer over the view
        gradient.frame = self.view.bounds
        
        // Array of colors to mix in the gradient
        gradient.colors = [color.CGColor, darkColor.CGColor]
        
        // Add sublayer onto main view
        view.layer.insertSublayer(gradient, atIndex: 0)
        
        // Make background clear
        view.backgroundColor = UIColor.clearColor()
        
        animateBackgroundGradient()
        
        // Add timer to the layer to change colors after two seconds
        var animationTimer = NSTimer.scheduledTimerWithTimeInterval(2.05, target: self, selector: "animateBackgroundGradient", userInfo: nil, repeats: true)
    }
    
    // Animates Gradient Layer to change colors
    func animateBackgroundGradient() {
        
        // Creates new colors for animation after initial gradient
        let color = UIColor(randomFlatColorOfShadeStyle: UIShadeStyle.Dark)
        let darkColor = UIColor(complementaryFlatColorOf: color)
        
        // Adding colors to the gradient array of colors
        gradient.colors = [color.CGColor, darkColor.CGColor]
        
        // Sets original Colors to new colors
        let fromColors = gradient.colors
        
        let toColors = [color.CGColor, darkColor.CGColor]
        
        // Changes gradient to new colors
        gradient.colors = toColors
        
        // Animation settings
        let animation = CABasicAnimation()
        
        animation.fromValue = fromColors
        animation.toValue   = toColors
        animation.duration  = 2.0
        animation.fillMode  = kCAFillModeForwards
        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        animation.delegate  = self
        
        // Add animation on gradient
        gradient.addAnimation(animation, forKey: "animateGradient")
        
        
    }
    
    // Brings up action sheet with Camera button is tapped
    @IBAction func onCameraButtonTapped(sender: UIButton) {
        showActionSheet(sender)
    }
    
    func showActionSheet(sender: AnyObject!) {
        
        // Add buttons to action sheet
        actionSheet.addButtonWithTitle("Take Photo")
        actionSheet.addButtonWithTitle("Choose Photo")
        actionSheet.cancelButtonIndex = actionSheet.addButtonWithTitle("Cancel")
        
        // Show the actionsheet with above options
        actionSheet.showInView(view)
    }
    
    func actionSheet(actionSheet: UIActionSheet, clickedButtonAtIndex buttonIndex: Int) {
        switch buttonIndex {
        case 0: return
        case 1:  // Presents ImagePicker allowing user to choose a photo from library
            imagePicker.allowsEditing = true
            imagePicker.sourceType = .PhotoLibrary
            presentViewController(imagePicker, animated: true, completion: nil)
        default: // Cancel is default
            return
        }
    }
    
    // After image is chosen, extra colors from image 
    func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [NSObject : AnyObject]) {
        
        if let pickedImage = info[UIImagePickerControllerEditedImage] as? UIImage {
            let color = CCColorCube()
            
            let brightColorsFromImage = color.extractBrightColorsFromImage(pickedImage, avoidColor: nil, count: 60) as! [UIColor]
            let darkColorsFromImage = color.extractDarkColorsFromImage(pickedImage, avoidColor: nil, count: 60) as! [UIColor]
        
            self.dismissViewControllerAnimated(true, completion: nil)
            
            var vc = self.storyboard?.instantiateViewControllerWithIdentifier("displayColorsViewController") as! DisplayColorsViewController
            
            vc.colorsArray = brightColorsFromImage + darkColorsFromImage
            vc.image = pickedImage
            
            self.presentViewController(vc, animated: true, completion: nil)
            
        
        
    }
    
    // Dismiss controller if canceled
    func imagePickerControllerDidCancel(picker: UIImagePickerController) {
        dismissViewControllerAnimated(true, completion: nil)
        }
    }
    
    func hexStringFromColor(color:UIColor) -> String {
        
        let components = CGColorGetComponents(color.CGColor)
        
        let r = components[0]
        let g = components[1]
        let b = components[2]
        
        var returnString = "#\(round(r * 255))\(round(g * 255))\(round(b * 255))"
        
        return returnString
    }
}























